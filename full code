# -*- coding: utf-8 -*-
"""project3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nGIAtN4m9U67e4G80Yds5dZHbswoMgqe

# Step 1: Object Masking
"""

import numpy as np
import cv2
from matplotlib import pyplot as plt

# Step 1: Object Masking
def object_masking(image_path, save_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contours = [contour for contour in contours if cv2.contourArea(contour) > 1000]

    #Extract the PCB
    mask = np.zeros_like(image)
    cv2.drawContours(mask, contours, -1, (255, 255, 255), thickness=cv2.FILLED)
    result = cv2.bitwise_and(image, mask)

    cv2.imwrite(save_path, result)

image_path = "/content/drive/MyDrive/Colab Notebooks/project3/motherboard_image.JPEG"
save_path = "/content/drive/MyDrive/Colab Notebooks/project3/extracted_image.jpg"

object_masking(image_path, save_path)
original_image = cv2.imread(image_path)
extracted_image = cv2.imread(save_path)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(extracted_image, cv2.COLOR_BGR2RGB))
plt.title('Extracted Image')
plt.axis('off')

plt.show()

"""# Step 2: YOLOv8 Training"""

! nvidia-smi

!pip install ultralytics

"""install YOLOv8"""

from ultralytics import YOLO
import os
from IPython.display import display, Image
from IPython import display
display.clear_output()
!yolo mode=checks

"""Train YOLOv8 Model on Custom Dataset"""

from ultralytics import YOLO

# Load a model
model = YOLO('yolov8n.yaml')  # build a new model from YAML
model = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)
model = YOLO('yolov8n.yaml').load('yolov8n.pt')  # build from YAML and transfer weights

# Train the model
results = model.train(data='/content/drive/MyDrive/Colab Notebooks/project3/data/data.yaml', epochs=100, imgsz=1200, batch=5)

"""Validate the Model"""

from ultralytics import YOLO

# Validate the model
metrics = model.val()  # no arguments needed, dataset and settings remembered
metrics.box.map    # map50-95
metrics.box.map50  # map50
metrics.box.map75  # map75
metrics.box.maps   # a list contains map50-95 of each category

"""# Step 3: YOLOv8 Evaluation"""

from ultralytics import YOLO
model = YOLO('yolov8n.yaml').load('yolov8n.pt')
evaluation_folder = "/content/drive/MyDrive/Colab Notebooks/project3/data/evaluation"
image_files = ["ardmega.jpg", "arduno.jpg", "rasppi.jpg"]

for image_file in image_files:
    image_path = os.path.join(evaluation_folder, image_file)

    results = model.predict(image_path)

    display.clear_output()
    display.display(Image(filename=image_path, width=600))

    for prediction in results.xyxy[0]:
        label = model.names[int(prediction[5])]
        confidence = prediction[4].item()
        bbox_values = prediction[:4].tolist()
        print(f"Label: {label}, Confidence: {confidence:.2f}, BBox: {bbox_values}")

print("Evaluation completed.")
